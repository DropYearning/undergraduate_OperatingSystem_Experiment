操作系统PBL研究报告 
          ――进程调度方案设计
第一组： 15051350朱家豪 15051349周亮 15051348郑雨 15051410安胜

（一）相关数据结构
1.进程PCB结构体
struct PCB 
{
int pid; 		//进程号
char *name; 	//进程名
int static_prio; 	//静态优先级
int run_time; 	//已运行时间    
int creat_time; 	//进程创建时间
int X; 		//优先级影响因子,优先级过低时增加，刚运行中断的进程减少
int dynamic_prio	//动态优先级受运行时间和影响因子
    {
        return static_prio - create_time - run_time+X;
    }
｝

2.建立红黑树，保存就绪队列中的进程的PCB的指针
struct NODE
{
    PCB *ptr;
    bool operator<(const PCB &ptrb)const
    {
        return ptr->dynamic_prio() < ptrb->dynamic_prio();
    }
    //红黑树内部小于号重载，使用了C++中标准库中的SET；
}

（二）具体操作
1.对进程的操作
// 创建进程
void creat_process(char *name, int static_prio)
｛
    // 分配空间和pid
    在内存中分配一个PCB空间;
    分配一个pid给该PCB;
    // 初始化进程名和静态优先级
    strcpy(PCB.name, name);
    PCB.static_prio = static_prio; 
    PCB.creat_time = 当前时间;
    PCB.run_time = 0; 
    // 进程的初始动态优先级 = 静态优先级 
    PCB.dynamic_prio = static_prio;
｝


// 撤销进程
void exit_process()
{
    释放该进程的PCB空间
}

2.对红黑树的操作
    对于插入、删除、访问最大或最小结点等操作已经封装在C++ STL里了，这里我们不再具体解释红黑树如何操作。在我们这颗红黑树内部，会自动按照进程的优先级排序。

（三）进程调度方案
1.所有要运行的进程的PCB的id全都插入到红黑树中
2.当前没有进程运行且红黑树非空，取出红黑树中优先级最大的进程并运行
3.时刻比较当前运行中的进程的优先级是否小于红黑树中优先级最大的进程，若小于，则将当前进程中断，PCB的优先级影响因子X-=10（防止当前进程和红黑树中优先级最高的进程不断轮换），取出红黑树中优先级最大的进程运行，并将原先运行的进程的dynamic_prio更新，丢入红黑树中
4.每隔10s 将红黑树中优先级最小的进程的优先级影响因子X+10（解决“饥饿现象”），重新放入红黑树中
【最好加一张张流程图】
（四）方案性能分析
（1）性能分析
设n为总进程个数，操作有：
1.将PCB插入红黑树，时间复杂度O (log(n))
2.查询红黑树中优先级最大和最小的PCB，时间复杂度O (log(n))
3.取出PCB，时间复杂度O (log(n))
4.修改PCB的X,时间复杂度O（1）
整个方案的空间复杂度为O（n）

（2）本方案优点：
    ①速度快：运用了红黑树，在查询和修改的时候比链表要快；
    ②解决了“饥饿现象”：对于优先级低的进程，每隔一段时间通过修改影响因子X来提高其动态优先级。

（3）本方案缺点：
    ①对于短作业和长作业没有做一个区分，对于短作业不利；

（五）相关问题
（1）如何统计进程的等待时间以及进程在CPU上的运行时间？
统计进程的等待时间和在CPU上运行的时间都需要用到时钟。
计算机的时钟分为两类：实时时钟RTC和时钟震荡器。前者是PC主板上的一块芯片，有独立电池供电，即便关机也可以维持时间的更新，实时时钟RTC记录当前的日期和时间；后者周期性地发出脉冲，这个脉冲送入CPU，就可以引发一个中断请求信号，我们就把它叫做时钟中断。时钟中断的主要工作是处理和时间有关的所有信息、决定是否执行调度程序。
一个进程从创建到终止叫做该进程的生存期。进程在其生存期内使用 CPU 的时间，内核都要进行记录，以便进行统计。进程耗费 CPU 的时间由两部分组成：一是在用户态下耗费的时间、一是在系统态下耗费的时间。每个时钟中断，当前进程所有和时间有关的信息都要更新：当前进程耗费的 CPU 时间要更新；时间片计数器 counter 要更新，如果 counter<=0，则要执行调度程序。

（2）时钟中断在进程调度中有什么作用？
由于调度方法的不同，时钟中断在进程调度中的作用也各有不同，但基本包括以下几个方面：
①对于基于时间片轮转的调度算法，进程的时间片是由时间中断来更新的，比如我们可以设置一个计数器counter，假设分给某进程的时间片长度为5个时钟周期，在每个时钟中断到来时counter--，当counter == 0时表示应该再调度别的进程运行
②统计进程的等待时间以及进程在CPU上的运行时间也离不开时钟中断

（六）小组成员分工


（七）参考资料
[1] Linux内核源码
[2] 庞丽萍,阳富民.《计算机操作系统》
[3] 张颖慈.数据结构在操作系统进程调度中的应用研究
[4] 刘磊.Linux内核进程调度算法的分析
[5] 一篇文章搞懂红黑树的原理及实现
（http://www.jianshu.com/p/37c845a5add6）
[6] Linux的CFS(完全公平调度)算法
(http://blog.csdn.net/liuxiaowu19911121/article/details/47070111)
[7] linux时钟浅析
(https://wenku.baidu.com/view/46ce4405fc4ffe473368abc5.html)
[8] 时间系统、进程的调度与切换
(http://blog.csdn.net/jnu_simba/article/details/11745743)
[9] Linux之时钟中断
(http://blog.csdn.net/wdzxl198/article/details/8874859)
[10] 陈莉君.《深入分析Linux内核源代码》
[11] Linux内核进程调度以及定时器实现机制
(http://www.cppblog.com/baby-fly/archive/2011/01/27/139436.html)